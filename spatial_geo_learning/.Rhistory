library(tidyverse)
library(sf)
library(raster)
library(spData)
sf %>% methods()
methods(class = "sf")
dim(world) # it is a 2 dimensional object, with rows and columns
nrow(world) # how many rows?
ncol(world) # how many columns?
# Remove geometry col from sf object
world_df <- st_drop_geometry(world)
data(world)
load(world)
class(world_df)
class(world)
colnames(world)
world_df2 <- world %>% select(-geom)
class(world)
world_df2 <- world["geom"]
world_df2 <- world[-"geom"]
world_df2 <- world[c("geom")]
world_df2 <- world[-c("geom")]
rm(world_df2)
world_df %>% select(iso_a2)
library(tidyverse)
world_df %>% select(iso_a2)
world_df %>% colnames()
world %>% dplyr::select(geom)
world %>% dplyr::select(-geom)
w2 <- world %>% dplyr::select(-geom)
class(w2)
rm(w2)
# dplyr functions must reference 'dplyr'
# in order to work
w2 <- world %>% dplyr::select(name_long, population = pop)
names(w2)
world_agg1 = aggregate(pop ~ continent, FUN = sum, data = world, na.rm = TRUE)
world_agg1
world_agg1 <- world %>%
group_by(continent) %>%
summarise(pop = sum(pop, na.rm = TRUE))
View(world_agg1)
world %>%
dplyr::select(pop, continent) %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE), n_countries = n()) %>%
top_n(n = 3, wt = pop) %>%
arrange(desc(pop)) %>%
st_drop_geometry()
world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE), n_countries = n()) %>%
top_n(n = 3, wt = pop) %>%
arrange(desc(pop)) %>%
st_drop_geometry()
world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE), n_countries = n()) %>%
top_n(n = 3, wt = pop) %>%
arrange(desc(pop))
coffee_data
left_join(world, coffee_data)
world_coffee <- left_join(world, coffee_data)
world_coffee %>% class()
plot(world_coffee$coffee_production_2017)
plot(world_coffee %>% select(coffee_production_2017))
plot(world_coffee %>% dplyr::select(coffee_production_2017))
plot(world_coffee["coffee_production_2017"])
world_coffee <- inner_join(world, coffee_data)
world_coffee %>% class()
plot(world_coffee["coffee_production_2017"])
# Fix name of "Congo"
grepl("Congo,", coffee_data$name_long)
str_subset(world$name_long, "Dem*.+Congo")
world$name_long %>% str_subset("Dem*.+Congo")
# Fix name of "Congo"
coffee_data$name_long[grepl("Congo,", coffee_data$name_long)] <- world$name_long %>% str_subset("Dem*.+Congo")
world_coffee <- inner_join(world, coffee_data)
plot(world_coffee["coffee_production_2017"])
# Combine col info with unite()
world_coffee %>%
unite("con_reg", continent:region_un, sep = ":", remove=TRUE)
# Combine col info with unite()
world_coffee <- world_coffee %>%
unite("con_reg", continent:region_un, sep = ":", remove=TRUE)
View(world_coffee)
world_coffee <- inner_join(world, coffee_data)
# Fix name of "Congo"
coffee_data$name_long[grepl("Congo,", coffee_data$name_long)] <- world$name_long %>% str_subset("Dem*.+Congo")
world_coffee <- inner_join(world, coffee_data)
# Combine col info with unite()
world_coffee <- world_coffee %>%
unite("con_reg", continent:region_un, sep = ":")
View(world_coffee)
world_coffee <- inner_join(world, coffee_data)
world_coffee %>% class()
plot(world_coffee["coffee_production_2017"])
# Fix name of "Congo"
coffee_data$name_long[grepl("Congo,", coffee_data$name_long)] <- world$name_long %>% str_subset("Dem*.+Congo")
world_coffee <- inner_join(world, coffee_data)
# Combine col info with unite()
world_coffee <- world_coffee %>%
unite("con_reg", continent:region_un, sep = ":", drop=FALSE)
# Combine col info with unite()
world_coffee <- world_coffee %>%
unite("con_reg", continent:region_un, sep = ":", remove=FALSE)
world_coffee <- inner_join(world, coffee_data)
world_coffee %>% class()
plot(world_coffee["coffee_production_2017"])
# Fix name of "Congo"
coffee_data$name_long[grepl("Congo,", coffee_data$name_long)] <- world$name_long %>% str_subset("Dem*.+Congo")
world_coffee <- inner_join(world, coffee_data)
# Combine col info with unite()
world_coffee <- world_coffee %>%
unite("con_reg", continent:region_un, sep = ":", remove=TRUE)
# Undo unite with separate()
world_coffee = world_coffee %>%
separate(con_reg, c("continent", "region_un"), sep = ":")
elev = raster(
nrows = 6, ncols = 6, res = 0.5
, xmn = -1.5, xmx = 1.5
, ymn = -1.5, ymx = 1.5
, vals = 1:36
)
View(elev)
grain_order = c("clay", "silt", "sand")
grain_char = sample(grain_order, 36, replace = TRUE)
grain_fact = factor(grain_char, levels = grain_order)
grain_fact
grain = raster(
nrows = 6, ncols = 6, res = 0.5
, xmn = -1.5, xmx = 1.5
, ymn = -1.5, ymx = 1.5
, vals = grain_fact
)
ratify(grain)
levels(grain)
levels(grain)[[1]]
cbind(
levels(grain)[[1]]
, wetness = c("wet", "moist", "dry")
)
levels(grain)[[1]] <- cbind(
levels(grain)[[1]]
, wetness = c("wet", "moist", "dry")
)
levels(grain)
factorValues(grain)
grain[c(1,11,35)]
factorValues(grain, grain[c(1,11,35)])
plot(grain)
factorValues(grain, grain[c(1,11,35)])
factorValues(grain)
grain
grain$attributes
grain["attributes"]
grain
levels(grain)
plot(grain)
new_raster2 <- raster(
nrows = 6, ncols = 6, res = 0.5
, xmn = -1.5, xmx = 1.5
, ymn = -1.5, ymx = 1.5
, vals = 1:36
)
plot(new_raster2)
grain$layer
grain$layer(1)
grain$layer
plot(grain)
plot(elev)
levels(grain)
plot(grain)
elev[1,1]
elev[1]
elev[2
elev[2
]
elev[2]
elev[1,2]
# Subset stacked raster
r_stack <- stack(elev, grain)
r_stack
names(r_stack) <- c("elev", "grain")
r_stack
subset(r_stack, "elev")
r_stack[["elev"]]
r_stack$elev
values(elev)
summary(elev)
cellStats(elev)
cellStats(elev, sd)
summary(elev)
summary(brick(elev, grain))
cellStats(brick(elev, grain), sd)
hist(elev)
hist(grain)
# boxplot, density, hist, pairs
boxplot(grain)
# boxplot, density, hist, pairs
boxplot(elev)
data("us_states")
data("us_states_df")
us_states_name <- us_states %>%
select(NAME)
us_states_name <- us_states %>%
dplyr::select(NAME)
View(us_states_name)
View(us_states)
us_states %>%
dplyr::select(contains("pop"))
# Find states that belong to mid-west region
us_states %>%
dplyr::filter(region=="Midwest")
# Find states that belong to mid-west region
us_states %>%
filter(region=="Midwest")
# Find states that belong to mid-west region
us_states %>%
filter(REGION=="Midwest")
# Find states that belong to mid-west region
us_states %>%
dplyr::filter(REGION=="Midwest") %>%
plot()
modal(grain)
# What is the most common grain class
factorValues(grain, modal(values(grain)))
library(tidyverse)
library(sf)
library(raster)
library(spData)
data("nz")
data("nz_height")
nz
View(nz)
View(nz)
View(nz_height)
nz %>% filter(Name == "Canterbury")
canterbury <- nz %>% filter(Name == "Canterbury")
nz_height[canterbury, ]
nz_height %>% rownames()
canterbury
View(canterbury)
plot(nz)
plot(nz["Name"])
canterbury_height <- nz_height[canterbury, ]
plot(canterbury["Name"])
plot(canterbury_height["Name"])
plot(canterbury_height)
class(canterbury_height)
canterbury_height
View(canterbury)
View(canterbury_height)
plot(canterbury_height[1])
plot(canterbury)
plot(canterbury[0])
plot(canterbury[1])
plot(canterbury_height[1], add=TRUE)
plot(canterbury_height[0], add=TRUE)
st_crs(canterbury)
st_crs(canterbury)[0]
st_crs(canterbury)[1]
st_crs(canterbury_height)[1]
st_crs(nz)[1]
st_crs(nz_height)[1]
nz_height[canterbury, op=st_disjoint]
nz_height[canterbury, op=st_disjoint] %>%
plot()
nz_height[canterbury, op=st_disjoint][0] %>%
plot()
nz_height[canterbury, op=st_intersects][0] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_intersects] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_intersects] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_disjoint] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_contains] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_covers] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_crosses] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_equals] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_is_within_distance] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz[canterbury, op=st_overlaps] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_overlaps] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_touches] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_within] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_disjoint] %>%
plot()
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
plot(nz)
nz_height[canterbury, op=st_disjoint] %>%
plot(add=TRUE)
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
plot(nz["Name"])
nz_height[canterbury, op=st_disjoint] %>%
plot(add=TRUE)
nz_height[canterbury, op=st_disjoint][0] %>%
plot(add=TRUE)
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
plot(nz["Name"])
nz_height[canterbury, op=st_disjoint][0] %>%
plot(add=TRUE)
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_disjoint][0] %>%
plot(add=TRUE)
# Supplement the op argument with the desired operation
# st_intersects, st_disjoint, st_contains, st_covers, st_crosses, st_equals
# st_is_within_distance, st_overlaps, st_touches, st_within
nz_height[canterbury, op=st_disjoint][0] %>%
plot()
# another way to filter
canterbury_height2 = nz_height %>%
filter(st_intersects(x = ., y = canterbury, sparse = FALSE))
plot(canterbury_height2)
plot(canterbury_height)
